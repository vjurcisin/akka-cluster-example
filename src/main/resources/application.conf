akka {

  loglevel = INFO

  log-dead-letters-during-shutdown = off
  log-dead-letters = off

  akka.cluster.metrics.enabled = off


  akka.extensions = ["akka.cluster.metrics.ClusterMetricsExtension",
    "akka.cluster.pubsub.DistributedPubSub"]

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  persistence {

    journal {
      plugin = "akka.persistence.journal.inmem"

      inmem {
        dir = "target/persistence/journal"
      }
    }

    snapshot-store.local.dir = "target/persistence/snapshots"
  }

  cluster.pub-sub {
    # Actor name of the mediator actor, /system/distributedPubSubMediator
    name = distributedPubSubMediator
    # Start the mediator on members tagged with this role.
    # All members are used if undefined or empty.
    role = ""
    # The routing logic to use for 'Send'
    # Possible values: random, round-robin, broadcast
    routing-logic = random
    # How often the DistributedPubSubMediator should send out gossip information
    gossip-interval = 100ms
    # Removed entries are pruned after this duration
    removed-time-to-live = 120s

    max-delta-elements = 3000
    # The entityId of the dispatcher to use for DistributedPubSubMediator actors.
    # If not specified default dispatcher is used.
    # If specified you need to define the settings of the actual dispatcher.
    use-dispatcher = ""
  }

  cluster {
    leader-actions-interval = 100ms
    gossip-interval = 100ms
    periodic-tasks-initial-delay = 1s
    gossip-time-to-live = 0.2s
    seed-node-timeout = 1s
    publish-stats-interval = 0
  }

  cluster {
    seed-nodes = [
      "akka.tcp://ClusterSystem@127.0.0.1:2551",
      "akka.tcp://ClusterSystem@127.0.0.1:2552",
      "akka.tcp://ClusterSystem@127.0.0.1:2553"]
  }

  remote {
    log-received-messages = off
    log-sent-messages = off
    log-remote-lifecycle-events = off

    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }
}
